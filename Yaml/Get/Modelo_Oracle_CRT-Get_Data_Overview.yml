# Desenvolvido pelo time da Fábrica de Ingestão ATRA Consultoria.
# [Oracle] Processo de captura das estatísticas das colunas da tabela transacional

main:
  steps:

    # Atribui os valores iniciais para as variáveis
    - init:
        assign:
          - project_id: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
          - location: "southamerica-east1"
          - temp_location: ${"gs://dataflow-staging-" + location + "-1080416849631/tmp"}
          - template_path: ${"gs://dataflow-templates-" + location + "/latest/flex/Oracle_to_BigQuery"}
          - service_account: "service-1080416849631-dataflow@csf-core-data-crt.iam.gserviceaccount.com"
          - connectionPropertiesString: "unicode=true;characterEncoding=UTF-8;defaultRowPrefetch=350000"
          - KMSEncryptString: "projects/csf-core-data-crt/locations/global/keyRings/oracle_JDBC_ring/cryptoKeys/oracle_JDBC_key"
          - username_token_id: "Oracle_CRT_Username" # Parâmetro do processo
          - password_token_id: "Oracle_CRT_DES04_Psw" # Parâmetro do processo
          - connection_token_id: "Oracle_CRT_DES01_ConnectionString" # Parâmetro do processo
          - job_name: "pdr-estorno-get-data-overview-crt" # Parâmetro do processo
          - sourceOwnerName: "DEBREC" # Parâmetro do processo
          - sourceTableName: "TBESTORNO" # Parâmetro do processoesso
          - querySelect: ${"SELECT '" + sourceOwnerName + "." + sourceTableName + "' TABELA, COUNT(1) AS QTD_LINHAS, TO_CHAR(MIN(NULL), 'YYYY-MM-DD HH24:MI:SS') AS MIN_DATE_1, TO_CHAR(MAX(NULL), 'YYYY-MM-DD HH24:MI:SS') AS MAX_DATE_1, TO_CHAR(MIN(NULL), 'YYYY-MM-DD HH24:MI:SS') AS MIN_DATE_2, TO_CHAR(MAX(NULL), 'YYYY-MM-DD HH24:MI:SS') AS MAX_DATE_2, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') AS DATAHORA_ATUAL"}
          - queryFrom: ${" FROM " + sourceOwnerName + "." + sourceTableName}
          - queryString: ${querySelect + queryFrom}
          - outputTableString: ${project_id + ":staging.fabrica_de_ingestao_get_data_overview"}
          - failureStatuses: ["JOB_STATE_FAILED", "JOB_STATE_CANCELLED", "JOB_STATE_UPDATED", "JOB_STATE_DRAINED"]
          - currentStatus: ""

    # Obtém o usuário da conexão
    - get_username_secret:
        call: googleapis.secretmanager.v1.projects.secrets.versions.accessString
        args:
          secret_id: ${username_token_id}
          project_id: ${project_id}
        result: user_connection

    # Obtém a senha da conexão
    - get_password_secret:
        call: googleapis.secretmanager.v1.projects.secrets.versions.accessString
        args:
          secret_id: ${password_token_id}
          project_id: ${project_id}
        result: pass_connection

    # Obtém o token da conexão
    - get_connection_secret:
        call: googleapis.secretmanager.v1.projects.secrets.versions.accessString
        args:
          secret_id: ${connection_token_id}
          project_id: ${project_id}
        result: connect_connection

    # Gera o job Dataflow
    - create_job:
        call: googleapis.dataflow.v1b3.projects.locations.flexTemplates.launch
        args:
          projectId: ${project_id}
          location: ${location}
          body:
            launchParameter:
              jobName: ${job_name + "-" + text.substring(time.format(sys.now()), 0, 10)}
              containerSpecGcsPath: ${template_path}
              environment:
                tempLocation: ${temp_location}
                serviceAccountEmail: ${service_account}
                subnetwork: "https://www.googleapis.com/compute/v1/projects/csf-net-sharedvpc-crt-1/regions/southamerica-east1/subnetworks/csf-subnet-crt-core-data-resources-sa-east1"
                network: "csf-net-sharedvpc-crt-1"
              parameters:
                useStorageWriteApi: "true"
                useColumnAlias: "true"
                connectionURL: ${connect_connection}
                query: ${queryString}
                outputTable: ${outputTableString}
                bigQueryLoadingTemporaryDirectory: "gs://csf-core-data-crt/teste_dataflow_tmp/"
                username: ${user_connection}
                password: ${pass_connection}
                KMSEncryptionKey: ${KMSEncryptString}
                connectionProperties: ${connectionPropertiesString}
                numWorkers: "1"
                maxNumWorkers: "1"
                workerMachineType: "n1-standard-8"
        result: launchResponse

    # Verifica o status do job Dataflow
    - check_job_status:
        switch:
          - condition: ${currentStatus in failureStatuses}
            next: assign_failure
          - condition: ${currentStatus != "JOB_STATE_DONE"}
            next: iterate
        next: assign_success

    # Obtém o status do job Dataflow
    - iterate:
        steps:
          - sleep_iterate:
              call: sys.sleep
              args:
                seconds: 60
          - get_job_status:
              call: googleapis.dataflow.v1b3.projects.locations.jobs.get
              args:
                jobId: ${launchResponse.job.id}
                location: ${launchResponse.job.location}
                projectId: ${launchResponse.job.projectId}
                view: "JOB_VIEW_SUMMARY"
              result: getJobResponse
          - getStatus:
              assign:
                - currentStatus: ${getJobResponse.currentState}
        next: check_job_status

    # Atribui o valor de "Sucesso" para a saída
    - assign_success:
        assign:
          - outputStatus: "Sucesso"
        next: the_end

    # Atribui o valor de "Falha" para a saída
    - assign_failure:
        assign:
          - outputStatus: "Falha"

    # Retorna o valor da saída
    - the_end:
        return: ${outputStatus}