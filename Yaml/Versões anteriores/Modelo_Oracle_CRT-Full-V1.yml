# Desenvolvido pelo time da Fábrica de Ingestão ATRA Consultoria.
# [Oracle] Processo para leitura Full dos dados da tabela transacional

- init:
    assign:
      - project_id: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
      - location: "southamerica-east1"
      - job_name: "p0127it-sisbon-tsb-bonustransacao-exec-inc-crt" # Parâmetro do processo
      - temp_location: ${"gs://dataflow-staging-" + location + "-1080416849631/tmp"}
      - template_path: ${"gs://dataflow-templates-" + location + "/latest/flex/Oracle_to_BigQuery"}
      - service_account: "service-1080416849631-dataflow@csf-core-data-crt.iam.gserviceaccount.com"
      - username_token_id: "Oracle_CRT_Username" # Parâmetro do processo
      - password_token_id: "Oracle_BI_Psw" # Parâmetro do processo
      - connection_token_id: "Oracle_CRT_BI_ConnectionString" # Parâmetro do processo
      - connectionPropertiesString: "unicode=true;characterEncoding=UTF-8"
      - KMSEncryptString: "projects/csf-core-data-crt/locations/global/keyRings/oracle_JDBC_ring/cryptoKeys/oracle_JDBC_key"
      - fetchSizeString: "350000"
      - outputTableName: "sisbon_tsb_bonustransacao" # Parâmetro do processo
      - preSQLTruncate: ${"TRUNCATE TABLE csf-core-data-crt.staging." + outputTableName}
      - querySelect: "SELECT BTR_ID_BONTRANSACAO,BON_ID_BONUS,TRA_ID_TRANSACAO,BTR_VL_BONTRANSACAO,BTR_VL_BONCCITRANSACAO,PRO_ID_PROCESSAMENTO" # Parâmetro do processo
      - queryFrom: " FROM CSF_SB.TSB_BONUSTRANSACAO" # Parâmetro do processo
      - outputTableString: ${"csf-core-data-crt:staging." + outputTableName}

- get_username_secret:
        call: googleapis.secretmanager.v1.projects.secrets.versions.accessString
        args:
            secret_id: ${username_token_id}
            project_id: ${project_id}
        result: user_connection

- get_password_secret:
        call: googleapis.secretmanager.v1.projects.secrets.versions.accessString
        args:
            secret_id: ${password_token_id}
            project_id: ${project_id}
        result: pass_connection

- get_connection_secret:
        call: googleapis.secretmanager.v1.projects.secrets.versions.accessString
        args:
            secret_id: ${connection_token_id}
            project_id: ${project_id}
        result: connect_connection

- intermediate:
    assign:
      - queryString: ${querySelect + queryFrom}

- truncate_output_table:
        call: googleapis.bigquery.v2.jobs.query
        args:
            projectId: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
            body:
                useLegacySql: false
                useQueryCache: false
                timeoutMs: 30000
                query: ${preSQLTruncate}

- create_job:
    call: googleapis.dataflow.v1b3.projects.locations.flexTemplates.launch
    args:
      projectId: ${project_id}
      location: ${location}
      body:
        launchParameter:
          jobName: ${job_name + "-" + text.substring(time.format(sys.now()), 0, 10)}
          parameters:
            useStorageWriteApi: "true"
            useColumnAlias: "true"
            connectionURL: ${connect_connection}
            query: ${queryString}
            outputTable: ${outputTableString}
            fetchSize: ${fetchSizeString}
            bigQueryLoadingTemporaryDirectory: "gs://csf-core-data-crt/teste_dataflow_tmp/"
            username: ${user_connection}
            password: ${pass_connection}
            KMSEncryptionKey: ${KMSEncryptString}
            connectionProperties: ${connectionPropertiesString}
            numWorkers: "1"
            maxNumWorkers: "5"
            workerMachineType: "n1-standard-8"
          environment:
            tempLocation: ${temp_location}
            serviceAccountEmail: ${service_account}
            subnetwork: "https://www.googleapis.com/compute/v1/projects/csf-net-sharedvpc-crt-1/regions/southamerica-east1/subnetworks/csf-subnet-crt-core-data-resources-sa-east1"
            network: "csf-net-sharedvpc-crt-1"
          containerSpecGcsPath: ${template_path}

- the_end:
    return: "SUCCESS"